{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Koomik\\\\fe_pokekoo\\\\pages\\\\testpage.jsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState } from 'react';\nimport 'isomorphic-unfetch';\nimport Cookies from 'js-cookie';\n\nvar Testpage = /*#__PURE__*/function (_React$Component) {\n  _inherits(Testpage, _React$Component);\n\n  var _super = _createSuper(Testpage);\n\n  function Testpage(props) {\n    var _this;\n\n    _classCallCheck(this, Testpage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      pokemon: [],\n      token: ''\n    };\n    return _this;\n  }\n\n  _createClass(Testpage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      function _fetchData() {\n        _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var rand, initialURL, fetchRes, res, data, count, token, pokemonData;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  rand = Math.round(Math.random() * (964 - 1) + 1);\n                  initialURL = 'https://pokeapi.co/api/v2/pokemon?offset=' + rand + '&limit=30';\n                  _context2.next = 4;\n                  return fetch(initialURL);\n\n                case 4:\n                  fetchRes = _context2.sent;\n                  _context2.next = 7;\n                  return fetchRes.json();\n\n                case 7:\n                  res = _context2.sent;\n                  data = res.results;\n                  count = res.count;\n                  token = Cookies.get('token');\n                  _context2.next = 13;\n                  return Promise.all(data.map( /*#__PURE__*/function () {\n                    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pokemon) {\n                      var pokemonRecord;\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return getPokemon(pokemon);\n\n                            case 2:\n                              pokemonRecord = _context.sent;\n                              return _context.abrupt(\"return\", pokemonRecord);\n\n                            case 4:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                    return function (_x) {\n                      return _ref.apply(this, arguments);\n                    };\n                  }()));\n\n                case 13:\n                  pokemonData = _context2.sent;\n                  console.log(pokemonData);\n                  return _context2.abrupt(\"return\", {\n                    pokemon: pokemonData,\n                    count: count,\n                    token: token\n                  });\n\n                case 17:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        return _fetchData.apply(this, arguments);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Testpage;\n}(React.Component); // const Testpage = ({pokemon = [], token ,count}) =>(\n//     <div>\n//        {console.log(token)}\n//       ss<h2>POKEMON FOREST <button onClick={componentDidMount}> reload </button> </h2>\n//         <ul className=\"list\">\n//           {pokemon.map(pokemon => {\n//             return (\n//               <li key={pokemon.name} >\n//                 <span>{pokemon.sprites.front_default} </span>\n//               </li>\n//             )\n//           })}\n//         </ul>\n//     </div>\n// )\n// function componentDidMount () {\n//   fetchData();\n// }\n// export function getPokemon({ url }) {\n//   return new Promise((resolve, reject) => {\n//       fetch(url).then(res => res.json())\n//           .then(data => {\n//               resolve(data)\n//           })\n//   });\n// }\n\n\nTestpage.getInitialProps = fetchData;\nexport default Testpage;","map":{"version":3,"sources":["D:/Koomik/fe_pokekoo/pages/testpage.jsx"],"names":["React","useState","Cookies","Testpage","props","state","pokemon","token","fetchData","rand","Math","round","random","initialURL","fetch","fetchRes","json","res","data","results","count","get","Promise","all","map","getPokemon","pokemonRecord","pokemonData","console","log","Component","getInitialProps"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,QAAkC,OAAlC;AACA,OAAQ,oBAAR;AACA,OAAOC,OAAP,MAAoB,WAApB;;IAKMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAW;AACPC,MAAAA,OAAO,EAAC,EADD;AAEPC,MAAAA,KAAK,EAAC;AAFC,KAAX;AAFgB;AAQnB;;;;wCAIkB;AAAA,eACFC,SADE;AAAA;AAAA;;AAAA;AAAA,8EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,kBAAAA,IAFR,GAEeC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,CAAvB,IAA4B,CAAvC,CAFf;AAGQC,kBAAAA,UAHR,GAGqB,8CAA4CJ,IAA5C,GAAiD,WAHtE;AAAA;AAAA,yBAKyBK,KAAK,CAACD,UAAD,CAL9B;;AAAA;AAKQE,kBAAAA,QALR;AAAA;AAAA,yBAMoBA,QAAQ,CAACC,IAAT,EANpB;;AAAA;AAMQC,kBAAAA,GANR;AAQQC,kBAAAA,IARR,GAQeD,GAAG,CAACE,OARnB;AASQC,kBAAAA,KATR,GASgBH,GAAG,CAACG,KATpB;AAWQb,kBAAAA,KAXR,GAWgBL,OAAO,CAACmB,GAAR,CAAY,OAAZ,CAXhB;AAAA;AAAA,yBAc0BC,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,GAAL;AAAA,wFAAS,iBAAMlB,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACjBmB,UAAU,CAACnB,OAAD,CADO;;AAAA;AACvCoB,8BAAAA,aADuC;AAAA,+DAEpCA,aAFoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAT;;AAAA;AAAA;AAAA;AAAA,sBAAZ,CAd1B;;AAAA;AAcMC,kBAAAA,WAdN;AAmBEC,kBAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AAnBF,oDAoBS;AACLrB,oBAAAA,OAAO,EAAEqB,WADJ;AAELP,oBAAAA,KAAK,EAALA,KAFK;AAEEb,oBAAAA,KAAK,EAALA;AAFF,mBApBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADiB;AAAA;AAAA;AA4BlB;;;6BAGS;AACN,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAiBD;;;;EA9DoBP,KAAK,CAAC8B,S,GAmE7B;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA3B,QAAQ,CAAC4B,eAAT,GAA2BvB,SAA3B;AAIE,eAAeL,QAAf","sourcesContent":["import React , { useState }  from 'react'\r\nimport  'isomorphic-unfetch'\r\nimport Cookies from 'js-cookie';\r\n\r\n\r\n\r\n\r\nclass Testpage extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n        pokemon:[],\r\n        token:''\r\n       \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncomponentDidMount(){\r\n  async function fetchData() {\r\n  \r\n    const rand = Math.round(Math.random() * (964 - 1) + 1);\r\n    const initialURL = 'https://pokeapi.co/api/v2/pokemon?offset='+rand+'&limit=30';\r\n    \r\n    const fetchRes = await fetch(initialURL)\r\n    const res = await fetchRes.json()\r\n    \r\n    const data = res.results\r\n    const count = res.count \r\n   \r\n    const token = Cookies.get('token')\r\n   \r\n  \r\n    let pokemonData = await Promise.all(data.map(async pokemon => {\r\n      let pokemonRecord = await getPokemon(pokemon)\r\n      return pokemonRecord\r\n    }))\r\n   \r\n    console.log(pokemonData)\r\n    return {\r\n      pokemon: pokemonData,\r\n      count, token\r\n    }\r\n    fetchData();\r\n  }\r\n  \r\n}\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n     {/* {console.log(token)}\r\n       ss<h2>POKEMON FOREST <button onClick={componentDidMount}> reload </button> </h2>\r\n        <ul className=\"list\">\r\n          {pokemon.map(pokemon => {\r\n           \r\n            return (\r\n              <li key={pokemon.name} >\r\n                <span>{pokemon.sprites.front_default} </span>\r\n                \r\n              </li>\r\n            )\r\n          })}\r\n        </ul> */}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n// const Testpage = ({pokemon = [], token ,count}) =>(\r\n\r\n \r\n//     <div>\r\n//        {console.log(token)}\r\n//       ss<h2>POKEMON FOREST <button onClick={componentDidMount}> reload </button> </h2>\r\n//         <ul className=\"list\">\r\n//           {pokemon.map(pokemon => {\r\n           \r\n//             return (\r\n//               <li key={pokemon.name} >\r\n//                 <span>{pokemon.sprites.front_default} </span>\r\n                \r\n//               </li>\r\n//             )\r\n//           })}\r\n//         </ul>\r\n//     </div>\r\n// )\r\n\r\n\r\n\r\n// function componentDidMount () {\r\n  \r\n//   fetchData();\r\n// }\r\n  \r\n// export function getPokemon({ url }) {\r\n//   return new Promise((resolve, reject) => {\r\n//       fetch(url).then(res => res.json())\r\n//           .then(data => {\r\n//               resolve(data)\r\n//           })\r\n//   });\r\n// }\r\n\r\n\r\n\r\n\r\nTestpage.getInitialProps = fetchData;\r\n\r\n\r\n\r\n  export default Testpage"]},"metadata":{},"sourceType":"module"}